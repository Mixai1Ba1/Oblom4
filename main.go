package main

import (
	"strings"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

var topics = map[string]string{
	"–ó–∞–∫–æ–Ω –•–∏–∫–∞":                `–ó–∞–∫–æ–Ω –•–∏–∫–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è, –∫–∞–∫ –ª–æ–≥–∞—Ä–∏—Ñ–º –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://ru.wikipedia.org/wiki/–ó–∞–∫–æ–Ω_–•–∏–∫–∞`,
	"–ú–µ–Ω—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö":        `–ú–µ–Ω—é –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—É–Ω–∫—Ç–æ–≤, –ø–æ–∑–≤–æ–ª—è—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.`,
	"–≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –Æ–∑–∞–±–∏–ª–∏—Ç–∏":       `–ù–∞–±–æ—Ä –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É–¥–æ–±—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ù–∏–ª—å—Å–µ–Ω–∞. –°—Å—ã–ª–∫–∞: https://www.nngroup.com/articles/ten-usability-heuristics/`,
	"–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏":           `–°–æ—á–µ—Ç–∞–Ω–∏—è –∫–ª–∞–≤–∏—à, —É—Å–∫–æ—Ä—è—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º—ã—à–∏.`,
	"–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã":    `GUI –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.`,
	"–õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω—É":  `–ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ.`,
	"–ü–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫":        `–ü–æ –º–µ—Ä–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.`,
	"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏": `Use-case –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.`,
	"–ú–µ—Ç—Ä–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞": `–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ç–æ—á–Ω–æ—Å—Ç—å, —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`,
}

func main() {
	myApp := app.New()
	myWindow := myApp.NewWindow("–°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
	myWindow.Resize(fyne.NewSize(1000, 600))

	modeLabel := widget.NewLabel("–†–µ–∂–∏–º: –ü–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫")
	searchEntry := widget.NewEntry()
	searchEntry.SetPlaceHolder("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å...")

	content := widget.NewRichText()
	content.Wrapping = fyne.TextWrapWord
	content.Segments = []widget.RichTextSegment{
		&widget.TextSegment{Text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Å–ª–µ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫."},
	}

	sortedKeys := getSortedKeys()
	leftPanel := container.NewVBox(widget.NewLabelWithStyle("–¢–µ–º—ã", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}))

	for _, topic := range sortedKeys {
		t := topic
		btn := widget.NewButton(t, func() {
			content.Segments = []widget.RichTextSegment{
				&widget.TextSegment{
					Text:      "üìò " + t,
					StyleName: widget.RichTextStyleNameStrong,
				},
				&widget.TextSegment{Text: "\n\n" + topics[t]},
			}
			content.Refresh()
		})
		leftPanel.Add(btn)
	}
	leftPanel.Resize(fyne.NewSize(300, 600))

	// === –ü–æ–∏—Å–∫ ===
	searchEntry.OnChanged = func(text string) {
		if modeLabel.Text == "–†–µ–∂–∏–º: –ü–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫" {
			text = strings.TrimSpace(strings.ToLower(text))
			if text == "" {
				content.Segments = []widget.RichTextSegment{
					&widget.TextSegment{Text: "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞."},
				}
				content.Refresh()
				return
			}

			var segments []widget.RichTextSegment
			for topic, desc := range topics {
				if strings.Contains(strings.ToLower(topic), text) || strings.Contains(strings.ToLower(desc), text) {
					segments = append(segments,
						&widget.TextSegment{
							Text:      "üîπ " + topic,
							StyleName: widget.RichTextStyleNameStrong,
						},
						&widget.TextSegment{Text: "\n"},
					)
					segments = append(segments, highlightTextSegments(desc, text)...)
					segments = append(segments, &widget.TextSegment{Text: "\n\n"})
				}
			}

			if len(segments) == 0 {
				content.Segments = []widget.RichTextSegment{
					&widget.TextSegment{Text: "‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π."},
				}
			} else {
				content.Segments = segments
			}
			content.Refresh()
		}
	}

	searchEntry.OnSubmitted = func(text string) {
		if modeLabel.Text == "–†–µ–∂–∏–º: –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É" {
			text = strings.TrimSpace(text)
			found := false
			for topic, desc := range topics {
				if strings.Contains(strings.ToLower(desc), strings.ToLower(text)) {
					segments := []widget.RichTextSegment{
						&widget.TextSegment{
							Text:      "üîç –ù–∞–π–¥–µ–Ω–æ –≤ \"" + topic + "\"",
							StyleName: widget.RichTextStyleNameStrong,
						},
						&widget.TextSegment{Text: "\n"},
					}
					segments = append(segments, highlightTextSegments(desc, text)...)
					content.Segments = segments
					content.Refresh()
					found = true
					break
				}
			}
			if !found {
				content.Segments = []widget.RichTextSegment{
					&widget.TextSegment{Text: "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."},
				}
				content.Refresh()
			}
		}
	}

	modeToggle := widget.NewButtonWithIcon("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º", theme.ViewRefreshIcon(), func() {
		if modeLabel.Text == "–†–µ–∂–∏–º: –ü–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫" {
			modeLabel.SetText("–†–µ–∂–∏–º: –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É")
		} else {
			modeLabel.SetText("–†–µ–∂–∏–º: –ü–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫")
		}
	})

	rightPanel := container.NewVSplit(
		container.NewVBox(modeLabel, searchEntry, modeToggle),
		content,
	)
	rightPanel.Offset = 0.25

	myWindow.SetContent(container.NewHSplit(leftPanel, rightPanel))
	myWindow.ShowAndRun()
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
func getSortedKeys() []string {
	keys := make([]string, 0, len(topics))
	for k := range topics {
		keys = append(keys, k)
	}
	return keys
}

// –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
func highlightTextSegments(text, query string) []widget.RichTextSegment {
	var segments []widget.RichTextSegment

	lowerText := strings.ToLower(text)
	lowerQuery := strings.ToLower(query)

	start := 0
	for {
		index := strings.Index(lowerText[start:], lowerQuery)
		if index == -1 {
			break
		}
		index += start

		if index > start {
			segments = append(segments, &widget.TextSegment{Text: text[start:index]})
		}

		segments = append(segments, &widget.TextSegment{
			Text:      text[index : index+len(query)],
			StyleName: widget.RichTextStyleNameEmphasis, // —Å–∏–Ω—è—è/–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
		})

		start = index + len(query)
	}
	if start < len(text) {
		segments = append(segments, &widget.TextSegment{Text: text[start:]})
	}

	return segments
}
