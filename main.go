package main

import (
	"strings"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/widget"
)

var topics = map[string]string{
	"–ó–∞–∫–æ–Ω –•–∏–∫–∞": `–ó–∞–∫–æ–Ω –•–∏–∫–∞ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è, –∫–∞–∫ –ª–æ–≥–∞—Ä–∏—Ñ–º –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤.
–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://ru.wikipedia.org/wiki/–ó–∞–∫–æ–Ω_–•–∏–∫–∞`,
	"–ú–µ–Ω—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö": `–ú–µ–Ω—é –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—É–Ω–∫—Ç–æ–≤, –ø–æ–∑–≤–æ–ª—è—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.`,
	"–≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –Æ–∑–∞–±–∏–ª–∏—Ç–∏": `–ù–∞–±–æ—Ä –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É–¥–æ–±—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ù–∏–ª—å—Å–µ–Ω–∞.
–°—Å—ã–ª–∫–∞: https://www.nngroup.com/articles/ten-usability-heuristics/`,
	"–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏":           `–°–æ—á–µ—Ç–∞–Ω–∏—è –∫–ª–∞–≤–∏—à, —É—Å–∫–æ—Ä—è—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º—ã—à–∏.`,
	"–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã":    `GUI –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —á–µ—Ä–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.`,
	"–õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω—É":  `–ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ.`,
	"–ü–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫":        `–ü–æ –º–µ—Ä–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.`,
	"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏": `Use-case –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.`,
	"–ú–µ—Ç—Ä–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞": `–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ç–æ—á–Ω–æ—Å—Ç—å, —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`,
}

func main() {
	myApp := app.New()
	myWindow := myApp.NewWindow("–°–ø—Ä–∞–≤–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
	myWindow.Resize(fyne.NewSize(1000, 600))

	modeLabel := widget.NewLabel("–†–µ–∂–∏–º: –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É")
	searchEntry := widget.NewEntry()
	searchEntry.SetPlaceHolder("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å...")

	content := widget.NewRichTextFromMarkdown("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É —Å–ª–µ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫.")
	content.Wrapping = fyne.TextWrapWord

	sortedKeys := getSortedKeys()
	topicList := widget.NewList(
		func() int { return len(sortedKeys) },
		func() fyne.CanvasObject { return widget.NewLabel("") },
		func(i int, o fyne.CanvasObject) {
			o.(*widget.Label).SetText(sortedKeys[i])
		},
	)
	topicList.OnSelected = func(id int) {
		key := sortedKeys[id]
		content.ParseMarkdown("üìò **" + key + "**\n\n" + topics[key])
	}

	modeToggle := widget.NewButton("üîÅ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º", func() {
		if modeLabel.Text == "–†–µ–∂–∏–º: –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É" {
			modeLabel.SetText("–†–µ–∂–∏–º: –ü–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫")
		} else {
			modeLabel.SetText("–†–µ–∂–∏–º: –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É")
		}
	})

	// searchEntry.OnChanged = func(text string) {
	// 	if modeLabel.Text == "–†–µ–∂–∏–º: –ü–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫" {
	// 		filtered := ""
	// 		for topic := range topics {
	// 			if strings.Contains(strings.ToLower(topic), strings.ToLower(text)) {
	// 				filtered += "‚Ä¢ " + topic + "\n"
	// 			}
	// 		}
	// 		if filtered == "" {
	// 			content.ParseMarkdown("‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")
	// 		} else {
	// 			content.ParseMarkdown("üî° –ù–∞–π–¥–µ–Ω–æ:\n" + filtered)
	// 		}
	// 	}
	// }
	searchEntry.OnChanged = func(text string) {
		if modeLabel.Text == "–†–µ–∂–∏–º: –ü–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫" {
			filtered := ""
			for topic := range topics {
				if strings.Contains(strings.ToLower(topic), strings.ToLower(text)) {
					filtered += "‚Ä¢ " + topic + "\n"
				}
			}
			if filtered == "" {
				content.ParseMarkdown("‚ùå –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.")
			} else {
				content.ParseMarkdown("üî° –ù–∞–π–¥–µ–Ω—ã —Ç–µ–º—ã:\n" + filtered)
			}
		}
	}

	// searchEntry.OnSubmitted = func(text string) {
	// 	if modeLabel.Text == "–†–µ–∂–∏–º: –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É" {
	// 		found := false
	// 		for topic, desc := range topics {
	// 			if strings.Contains(strings.ToLower(desc), strings.ToLower(text)) {
	// 				highlighted := strings.ReplaceAll(desc, text, "**"+text+"**")
	// 				content.ParseMarkdown("üîç **–ù–∞–π–¥–µ–Ω–æ –≤ \"" + topic + "\"**\n\n" + highlighted)
	// 				found = true
	// 				break
	// 			}
	// 		}
	// 		if !found {
	// 			content.ParseMarkdown("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
	// 		}
	// 	}
	// }
	searchEntry.OnSubmitted = func(text string) {
		if modeLabel.Text == "–†–µ–∂–∏–º: –ü–æ–∏—Å–∫ –ø–æ —à–∞–±–ª–æ–Ω—É" {
			found := false
			for topic, desc := range topics {
				index := strings.Index(strings.ToLower(desc), strings.ToLower(text))
				if index != -1 {
					original := desc[index : index+len(text)]
					highlighted := desc[:index] + "**" + original + "**" + desc[index+len(text):]
					content.ParseMarkdown("üîç **–ù–∞–π–¥–µ–Ω–æ –≤ \"" + topic + "\"**\n\n" + highlighted)
					found = true
					break
				}
			}
			if !found {
				content.ParseMarkdown("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
			}
		}
	}

	// leftScroll := container.NewVScroll(container.NewVBox(
	// 	widget.NewLabelWithStyle("–¢–µ–º—ã", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
	// 	topicList,
	// ))
	// leftScroll.SetMinSize(fyne.NewSize(300, 550))
	// –°—Ç–∞—Ç–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å–ª–µ–≤–∞
	topicButtons := make([]fyne.CanvasObject, 0)

	for _, topic := range sortedKeys {
		t := topic // –∫–æ–ø–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ª–∏–ø–ª–æ
		btn := widget.NewButton(topic, func() {
			content.ParseMarkdown("üìò **" + t + "**\n\n" + topics[t])
		})
		topicButtons = append(topicButtons, btn)
	}

	leftPanel := container.NewVBox(
		widget.NewLabelWithStyle("–¢–µ–º—ã", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}),
	)
	leftPanel.Add(container.NewVBox(topicButtons...))
	leftPanel.Resize(fyne.NewSize(300, 600)) // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∏ —à–∏—Ä–∏–Ω–∞

	// –°–ø—Ä–∞–≤–∞: –ø–æ–∏—Å–∫ –∏ —Ç–µ–∫—Å—Ç
	rightPanel := container.NewVSplit(
		container.NewVBox(modeLabel, searchEntry, modeToggle),
		content,
	)
	rightPanel.Offset = 0.25

	// myWindow.SetContent(container.NewHSplit(leftScroll, rightPanel))
	myWindow.SetContent(container.NewHSplit(leftPanel, rightPanel))

	myWindow.ShowAndRun()
}

func getSortedKeys() []string {
	keys := make([]string, 0, len(topics))
	for k := range topics {
		keys = append(keys, k)
	}
	return keys
}
